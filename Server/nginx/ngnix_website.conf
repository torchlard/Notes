user www www;
worker_processes 2;
# assigned pid location
pid /var/run/nginx.pid;

# [debug|info|notice|warn|error|crit]
error_log /var/log/nginx.error_log info;

events {
  # mac allowed connections
  connections 2000;
  # use [kqueue|rtsig|epoll|select|poll]
  use kqueue;
}

http {
  # import conf in other places
  include conf/mime.types;
  # octet-stream: binary file no known subtype
  default_type application/octet-stream;

  # main: top-level configuration context
  log_format main '$remote_addr - $remote_user [$time_local] '
  # $request: full original request line, $status: response status
  '"$request" $status $bytes_sent'
  '"$http_referer" "$http_user_agent"'
  '"$gzip_ratio"'

  log_format download '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $byte_sent'
  '"$http_referer" "$http_user_agent"'
  '"$http_range" "$sent_http_content_range"';

  # timeout for reading client header
  client_header_timeout 3m;
  # timeout for period between 2 successive read operations
  client_body_timeout 3m;
  # timeout for transmitting response to client
  send_timeout 3m;

  client_header_buffer_size 1k;
  # max number and size of buffer used for reading large client request header
  large_client_header_buffers 4 4k;

  # enable gzip of response
  gzip on;
  # min Content-length to be gzipped
  gzip_min_length 1100;
  gzip_buffers 4 8k;
  gzip_types text/plain;

  # num,size of buffer for reading response from disk
  output_buffers 1 32k;
  # transmission of client data postponed until least bytes of data to sent
  postpone_output 1460;

  # not to block on disk IO (aio)
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  # minimize number of send operation with specific size
  send_lowat 12000;

  keepalive_timeout 75 20;
  # when nginx close client connections(lingering_close)
  # max time nginx will process additional data coming from client
  lingering_time 30;
  lingering_timeoout 10;
  reset_timedout_connection on;

  server {
    listen one.example.com;
    # browser type "one.example.com" jump to "www.one.example.com" 
    server_name one.example.com www.one.example.com;

    access_log /var/log/nginx.access_log main;

    location / {
      proxy_pass http://127.0.0.1/;
      proxy_redirect off;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      client_max_body_size 10m;
      client_body_buffer_size 128k;
      client_body_temp_path /var/nginx/client_body_temp;

      proxy_connect_timeout 90;
      proxy_send_timeout 90;
      proxy_read_timeout 90;
      proxy_send_lowat 12000;

      # size of buffer used to read first part of response
      proxy_buffer_size 4k;
      proxy_buffers 4 32k;
      # buffer size that can busy sending response to client while response not yet fully read
      proxy_busy_buffers_size 64k;
      proxy_temp_file_write_size 64k;

      proxy_temp_path /var/nginx/proxy_temp;
      charset koi8-r;
    }

    error_page 404 /404.html;

    location /404.html {
      root /spool/www;
    }

    charset on;
    source_charset koi8-r;

    location /old_stuff/ {
      # rewrite URL, redefine to replacement part, with 'permanenet' flag
      rewrite ^/old_stuff/(.*)$ /new_stuff/$1 permanent;
    }

    location /download/ {
      valid_referers none blocked server_names *.example.com;
    }

    if ($invalid_referer){
      # return ^/ http://www.example.com/;
      return 403;
    }

    rewrite_log on;

    rewrite ^/(download/.*)/mp3/(.*)\..*$
    /$1/mp3/$2.mp3 break;

    root /spool/www;
    autoindex on;
    access_log /var/log/nginx-download.access_log download;
  }

  location ~* ^.+\.(jpg|jpeg|gif)$ {
    root /spool/www;
    access_log off;
    expires 30d;
  }
}























